// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2021 all rights reserved

// code guard
#if !defined(ampcor_viz_Complex_icc)
#error this file contains implementation details for ampcor::viz::Complex
#else


// metamethods
template <class iteratorT>
ampcor::viz::Complex<iteratorT>::
Complex(source_reference source,
        int bins,
        double saturation,
        double minBrightness, double maxBrightness,
        double minAmplitude, double maxAmplitude) :
    _bins { bins },
    _saturation { saturation },
    _scaleHue { 360. / _bins},
    _minBrightness { minBrightness },
    _maxBrightness { maxBrightness },
    _scaleBrightness { (_maxBrightness - _minBrightness) / _bins },
    _minAmplitude { minAmplitude },
    _maxAmplitude { maxAmplitude },
    _scaleAmplitude { (_maxAmplitude - _minAmplitude) / _bins },
    _source { source }
{}


// interface
template <class iteratorT>
auto
ampcor::viz::Complex<iteratorT>::
operator*() const -> rgb_type
{
    // get the value from the data source
    auto value = *_source;

    // get the phase from the data source and map it to [0, 360)
    auto phase = std::arg(value)*_deg + 180.;
    // compute the amplitude
    auto ampl = std::abs(value);
    // on underflow or overflow
    if ((ampl < _minAmplitude) || (ampl > _maxAmplitude)) {
        // send black
        return rgb_type { 0, 0, 0 };
    }


    // bin the phase
    int hueBin = phase / _scaleHue;
    // compute the hue
    auto hue = hueBin * _scaleHue;

    // bin the amplitude
    int brightnessBin = (ampl - _minAmplitude) / _scaleAmplitude;
    // compute the brightness
    auto brightness = _minBrightness + brightnessBin * _scaleBrightness;

    // wrap the conversion kernel
    auto f = [this, hue, brightness](int n) -> color_type {
        return kernelHSBtoRGB(n, hue, _saturation, brightness);
    };

    // build the rgb triplet and return it
    return rgb_type { f(5), f(3), f(1) };
}


template <class iteratorT>
auto
ampcor::viz::Complex<iteratorT>::
operator++() -> void
{
    // make {_source} point to the next value
    ++_source;
    // all done
    return;
}


#endif

// end of file
