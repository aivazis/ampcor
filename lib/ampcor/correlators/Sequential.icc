// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// parasim
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(ampcor_correlators_Sequential_icc)
#error this file contains implementation details for ampcor::correlators::Sequential
#else


// metamethods
// destructor
template <class slcT, class offsetsT>
ampcor::correlators::Sequential<slcT, offsetsT>::
~Sequential()
{
    // clean up
    delete [] _pids;
}


// constructor
template <class slcT, class offsetsT>
ampcor::correlators::Sequential<slcT, offsetsT>::
Sequential(int pairs,
           arena_layout_const_reference refLayout, arena_layout_const_reference secLayout,
           int refineFactor, int refineMargin,
           int zoomFactor) :
    // workload
    _pairs{ pairs },
    // the correlation refinement parameters
    _refineFactor{ refineFactor },
    _refineMargin{ refineMargin },
    _zoomFactor{ zoomFactor },
    // scratch space
    _pids{ new int [_pairs] },
    _refCoarse{ refLayout, "coarse_ref.dat", refLayout.cells() },
    _secCoarse{ secLayout, "coarse_sec.dat", secLayout.cells() }
{
    // we have some invariants to check: the number of pairs must match the reference and
    // secondary grid layout
    if (_pairs != refLayout.shape()[0] or _pairs != secLayout.shape()[0]) {
        // we have a bug
        pyre::journal::firewall_t channel("ampcor.sequential.setup");
        // build a report and complain
        channel
            << "while instantiating the sequential worker:"
            << pyre::journal::newline
            << "mismatch in the tile pair counts:"
            << pyre::journal::newline
            << "expected: " << _pairs << " tile pairs"
            << ", got " << refLayout.shape()[0] << " reference tiles"
            << ", and " << secLayout.shape()[0] << " secondary tiles"
            << pyre::journal::endl(__HERE__);
        // UNREACHABLE
        // unless the user has explicitly prevented firewalls from being fatal
    }

    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential.setup");
    // show me
    channel
        << "new Sequential worker:" << pyre::journal::newline
        // number ofpairs
        << "  pairs: " << _pairs << pyre::journal::newline
        // the reference tile coarse arena
        << "  reference coarse arena:" << pyre::journal::newline
        << "    origin: {" << refLayout.origin() << "}" << pyre::journal::newline
        << "     shape: {" << refLayout.shape() << "}" << pyre::journal::newline
        << "     cells: " << refLayout.cells() << pyre::journal::newline
        // the secondary tile coarse arena
        << "  secondary coarse arena:" << pyre::journal::newline
        << "    origin: {" << secLayout.origin() << "}" << pyre::journal::newline
        << "     shape: {" << secLayout.shape() << "}" << pyre::journal::newline
        << "     cells: " << secLayout.cells() << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return;
}


// accessors
template <class slcT, class offsetsT>
auto
ampcor::correlators::Sequential<slcT, offsetsT>::
pairs() const -> int
{
    // easy enough
    return _pairs;
}


// add a tile pair to the pile
template <class slcT, class offsetsT>
void
ampcor::correlators::Sequential<slcT, offsetsT>::
addTilePair(int tid, int pid, slc_const_reference ref, slc_const_reference sec)
{
    // verify that the tile id is within bounds
    if (tid >= _pairs) {
        // and if not, we have a bug
        pyre::journal::firewall_t channel("ampcor.sequential.transfer");
        // build a report and complain
        channel
            << "while adding tile pairs to the coarse arena:"
            << pyre::journal::newline
            << "tile id is out of bounds: "
            << pyre::journal::newline
            << "expected a number in [0," << _pairs << ")"
            << ", got "  << tid
            << pyre::journal::endl(__HERE__);
        // UNREACHABLE
        // unless the user has explicitly prevented firewalls from being fatal
    }

    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential.transfer");

    // record the original collation order
    _pids[tid] = pid;

    // build the lambda that does the detection
    auto detect = [](slc_pixel_type cell) -> slc_value_type {
        // compute the magnitude and return
        return std::abs(cell);
    };

    // build the tile selector
    arena_index_type delta { tid, 0, 0 };

    // get the reference arena origin
    auto refArenaOrigin = _refCoarse.layout().origin();
    // build the destination index for this tile
    auto refTileOrigin = refArenaOrigin + delta;
    // get the reference arena shape
    auto refArenaShape = _refCoarse.layout().shape();
    // narrow the shape down to a single reference tile
    arena_shape_type refTileShape { 1, refArenaShape[1], refArenaShape[2] };
    // build the box that contains this reference tile
    auto refBox = _refCoarse.box(refTileOrigin, refTileShape);
    // move the data and detect in transit
    std::transform(ref.begin(), ref.end(), refBox.begin(), detect);

    // get the secondary arena origin
    auto secArenaOrigin = _secCoarse.layout().origin();
    // build the destination index for this tile
    auto secTileOrigin = secArenaOrigin + delta;
    // get the secondary arena shape
    auto secArenaShape = _secCoarse.layout().shape();
    // narrow the shape down to a single secondary tile
    arena_shape_type secTileShape { 1, secArenaShape[1], secArenaShape[2] };
    // build the box that contains this secondary tile
    auto secBox = _secCoarse.box(secTileOrigin, secTileShape);
    // move the data and detect in transit
    std::transform(sec.begin(), sec.end(), secBox.begin(), detect);

    // sign on
    channel
        << "added tile pair #" << tid << " (" << pid << ") to the arena"
        << pyre::journal::newline
        // reference tile info
        << "reference:"
        << pyre::journal::newline
        << "    from: (" << ref.layout().origin() << "), shape: (" << ref.layout().shape() << ")"
        << pyre::journal::newline
        << "      to: (" << refBox.layout().origin() << "), shape: " << refBox.layout().shape()
        << pyre::journal::newline
        // secondary tile info
        << "secondary:"
        << pyre::journal::newline
        << "    from: (" << sec.layout().origin() << "), shape: " << sec.layout().shape()
        << pyre::journal::newline
        << "      to: (" << secBox.layout().origin() << "), shape: " << secBox.layout().shape()
        << pyre::journal::newline
        // flush
        << pyre::journal::endl;

    // all done
    return;
}


// execute the correlation plan
template <class slcT, class offsetsT>
void
ampcor::correlators::Sequential<slcT, offsetsT>::
adjust(offsets_reference map)
{
    // step 1: initial exploration of the correlation surface
    // adjust the reference tiles to zero mean and compute their variance
    // build sum area tables so we can do the same to the sliding window in the secondary tiles
    // use the sum area tables to compute mean amplitude for all possible window placements
    // compute the correlation hyper surface
    // find its maxima

    // all done
    return;
}


# endif

// end of file
