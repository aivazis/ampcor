// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// parasim
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(ampcor_correlators_Sequential_icc)
#error this file contains implementation details for ampcor::correlators::Sequential
#else


// metamethods
// destructor
template <class productT>
ampcor::correlators::Sequential<productT>::
~Sequential()
{
    // clean up
    delete [] _coarseArena;
    delete [] _refinedArena;
}


// constructor
template <class productT>
ampcor::correlators::Sequential<productT>::
Sequential(size_type pairs,
           layout_const_reference ref, layout_const_reference sec,
           size_type refineFactor, size_type refineMargin,
           size_type zoomFactor) :
    // workload
    _pairs{ pairs },
    // the correlation refinement parameters
    _refineFactor{ refineFactor },
    _refineMargin{ refineMargin },
    _zoomFactor{ zoomFactor },

    // the layout of things
    // initially
    _refLayout{ ref },
    _secLayout{ sec },
    _corLayout{ sec.shape() - ref.shape() + shape_type::fill(1) },
    // after refinement
    _refRefinedLayout{ refineFactor * ref.shape()},
    _secRefinedLayout{ refineFactor * (ref.shape() + shape_type::fill(2 * refineMargin))},
    _corRefinedLayout{ shape_type::fill(2 * refineFactor * refineMargin + 1) },
    // after zooming
    _corZoomedLayout{ zoomFactor * _corRefinedLayout.shape() },

    // the number of cells
    // initially
    _refCells{ ref.cells() },
    _secCells{ sec.cells() },
    _corCells{ _corLayout.cells() },
    // after refinement
    _refRefinedCells{ _refRefinedLayout.cells() },
    _secRefinedCells{ _secRefinedLayout.cells() },

    // strides
    _coarseStride{ _refCells + _secCells },
    _refinedStride{ _refRefinedCells + _secRefinedCells },

    // memory footprint, in bytes
    // initially
    _refFootprint{ _refCells * sizeof(cell_type) },
    _secFootprint{ _secCells * sizeof(cell_type) },
    _corFootprint{ _corCells * sizeof(value_type) }, // the correlation matrix is real...
    // after refinement
    _refRefinedFootprint{ _refRefinedCells * sizeof(cell_type) },
    _secRefinedFootprint{ _secRefinedCells * sizeof(cell_type) },

    // scratch space
    _coarseArena{ new cell_type [_pairs * _coarseStride] },
    _refinedArena{ new cell_type [_pairs * _refinedStride] }
{
    // compute the footprints
    auto footprint = _pairs*(_refFootprint + _secFootprint);
    auto refinedFootprint = _pairs*(_refRefinedFootprint + _secRefinedFootprint);

    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential");
    // show me
    channel
        << pyre::journal::at(__HERE__)
        << "new Sequential worker:"
        << pyre::journal::newline
        << "  pairs: " << _pairs
        << pyre::journal::newline
        << "    ref shape: {" << _refLayout.shape() << "}, " << _refCells << " cells"
        << pyre::journal::newline
        << "    sec shape: {" << _secLayout.shape() << "}, " << _secCells << " cells"
        << pyre::journal::newline

        << "  arena: "
        << pyre::journal::newline
        << "    at: " << _coarseArena
        << pyre::journal::newline
        << "    footprint: " << _pairs*(_refCells + _secCells) << " cells in "
        << (footprint/1024/1024) << " Mb"
        << pyre::journal::newline

        << "  refinement:"
        << pyre::journal::newline
        << "    factor: " << refineFactor
        << pyre::journal::newline
        << "    margin: " << refineMargin
        << pyre::journal::newline
        << "    refined ref shape: {" << _refRefinedLayout.shape()
        << "}, " << _refRefinedCells << " cells"
        << pyre::journal::newline
        << "    refined sec shape: {" << _secRefinedLayout.shape()
        << "}, " << _secRefinedCells << " cells"
        << pyre::journal::newline

        << "  refined arena: "
        << pyre::journal::newline
        << "    at: " << _refinedArena
        << pyre::journal::newline
        << "    footprint: " << _pairs*(_refRefinedCells + _secRefinedCells) << " cells in "
        << (refinedFootprint/1024/1024) << " Mb"
        << pyre::journal::endl;
}


// interface
template <class productT>
void
ampcor::correlators::Sequential<productT>::
addReferenceTile(size_t pid, product_const_reference ref)
{
    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential");
    // sign on
    channel
        << "adding reference tile #" << pid << " to the arena"
        << pyre::journal::endl(__HERE__);

    // figure out the starting address of this tile in the arena given its pair id
    cell_type * support = _coarseArena + pid * _coarseStride;
    // move the data
    std::copy(support, support+_refCells, ref.begin());

    // all done
    return;
}


# endif

// end of file
