// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// parasim
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(ampcor_correlators_Sequential_icc)
#error this file contains implementation details for ampcor::correlators::Sequential
#else


// metamethods
// destructor
template <class slcT, class offsetsT>
ampcor::correlators::Sequential<slcT, offsetsT>::
~Sequential()
{
    // clean up
    delete [] _pids;
}


// constructor
template <class slcT, class offsetsT>
ampcor::correlators::Sequential<slcT, offsetsT>::
Sequential(size_type pairs,
           tile_grid_layout_const_reference ref, tile_grid_layout_const_reference sec,
           size_type refineFactor, size_type refineMargin,
           size_type zoomFactor) :
    // workload
    _pairs{ pairs },
    // the correlation refinement parameters
    _refineFactor{ refineFactor },
    _refineMargin{ refineMargin },
    _zoomFactor{ zoomFactor },
    // scratch space
    _pids{ new size_type [_pairs] },
    _refCoarse{ ref, "coarse-ref.dat", ref.cells() },
    _secCoarse{ sec, "coarse-sec.dat", sec.cells() }
{
    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential.setup");
    // show me
    channel
        << pyre::journal::at(__HERE__)
        << "new Sequential worker:"
        << pyre::journal::newline
        << "  pairs: " << _pairs
        << pyre::journal::newline
        << "    ref shape: {" << ref.shape() << "}, " << ref.cells() << " cells"
        << pyre::journal::newline
        << "    sec shape: {" << sec.shape() << "}, " << sec.cells() << " cells"
        << pyre::journal::endl;

    // all done
    return;
}


// accessors
template <class slcT, class offsetsT>
auto
ampcor::correlators::Sequential<slcT, offsetsT>::
pairs() const -> size_type
{
    // easy enough
    return _pairs;
}


// add a tile pair to the pile
template <class slcT, class offsetsT>
void
ampcor::correlators::Sequential<slcT, offsetsT>::
addTilePair(size_type tid, size_type pid, slc_const_reference ref, slc_const_reference sec)
{
    // record the original collation order
    _pids[tid] = pid;

    // build the lambda that does the detection
    auto detect = [](slc_pixel_type cell) -> slc_value_type {
                      // compute the magnitude and return
                      return std::abs(cell);
                  };
    // the destination in either tile grid
    tile_grid_index_type origin { tid, 0, 0 };

    // using the shape of the reference tile
    const auto & refShape = ref.layout().shape();
    // build the shape of the reference box
    tile_grid_shape_type refBoxShape { 0, refShape[0], refShape[1] };
    // and now the box itself
    auto refBox = _refCoarse.box(origin, refBoxShape);
    // move the data and detect in transit
    std::transform(ref.begin(), ref.end(), refBox.begin(), detect);

    // using the shape of the secondary tile
    const auto & secShape = sec.layout().shape();
    // build the shape of the secondary box
    tile_grid_shape_type secBoxShape { 0, secShape[0], secShape[1] };
    // and now the box itself
    auto secBox = _secCoarse.box(origin, secBoxShape);
    // move the data and detect in transit
    std::transform(sec.begin(), sec.end(), secBox.begin(), detect);

    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential.transfer");
    // sign on
    channel
        << "added tile pair #" << tid << " (" << pid << ") to the arena"
        << pyre::journal::newline

        << "reference:"
        << pyre::journal::newline
        << "    from: (" << ref.layout().origin() << "), shape: (" << ref.layout().shape() << ")"
        << pyre::journal::newline
        << "      to: (" << refBox.layout().origin() << "), shape: " << refBox.layout().shape()
        << pyre::journal::newline

        << "secondary:"
        << pyre::journal::newline
        << "    from: (" << sec.layout().origin() << "), shape: " << sec.layout().shape()
        << pyre::journal::newline
        << "      to: (" << secBox.layout().origin() << "), shape: " << secBox.layout().shape()
        << pyre::journal::newline

        << pyre::journal::endl;


    // all done
    return;
}


// execute the correlation plan
template <class slcT, class offsetsT>
void
ampcor::correlators::Sequential<slcT, offsetsT>::
adjust(offsets_reference map)
{
    // step 1: initial exploration of the correlation surface
    // adjust the reference tiles to zero mean and compute their variance
    // build sum area tables so we can do the same to the sliding window in the secondary tiles
    // use the sum area tables to compute mean amplitude for all possible window placements
    // compute the correlation hyper surface
    // find its maxima

    // all done
    return;
}


# endif

// end of file
