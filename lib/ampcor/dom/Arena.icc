// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(ampcor_dom_Arena_icc)
#error this file contains implementation details for ampcor::dom::Arena
#else


// metamethods
template <typename pixelT>
constexpr
ampcor::dom::Arena<pixelT>::
Arena(layout_const_reference layout):
    _layout { layout }
{}


// interface
template <typename pixelT>
constexpr auto
ampcor::dom::Arena<pixelT>::
layout() const -> layout_const_reference
{
    // my layout knows
    return _layout;
}


template <typename pixelT>
constexpr auto
ampcor::dom::Arena<pixelT>::
cells() const -> std::size_t
{
    // easy enough
    return _layout.cells();
}


template <typename pixelT>
constexpr auto
ampcor::dom::Arena<pixelT>::
bytes() const -> std::size_t
{
    // easy enough
    return cells() * sizeof(pixel_type);
}


// a layout that describes a specific tile
template <typename pixelT>
constexpr auto
ampcor::dom::Arena<pixelT>::
tile(int tid) const -> layout_type
{
    // get my origin
    auto origin = layout().origin();
    // and my shape
    auto shape = layout().shape();

    // a shift to get the origin of the target tile
    layout_type::index_type delta { tid, 0, 0 };
    // so
    auto tileOrigin = origin + delta;
    // the shape of a tile
    layout_type::shape_type  tileShape { 1, shape[1], shape[2] };

    // put it all together
    return _layout.box(tileOrigin , tileShape);
}


#endif

// end of file
