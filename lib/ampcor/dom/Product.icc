// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2023 all rights reserved

// code guard
#if !defined(ampcor_dom_Product_icc)
#error this file contains implementation details for ampcor::dom::Product
#else


// metamethods
template <class specT, bool isReadOnly>
template <typename... Args>
constexpr
ampcor::dom::Product<specT, isReadOnly>::
Product(spec_const_reference spec, Args&&... args) :
    grid_type(spec.layout(), std::forward<Args>(args)...),
    _spec { spec }
{}


// accessors
template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
spec() const -> spec_const_reference
{
    // easy enough
    return _spec;
}


// interface
template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
cells() const -> std::size_t
{
    // my grid knows
    return this->layout().cells();
}


template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
bytes() const -> std::size_t
{
    // easy enough
    return this->layout().cells() * sizeof(pixel_type);
}


// tile factory
template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
tile(index_const_reference base, shape_const_reference shape) const -> product_type
{
    // specify the region
    auto box = this->layout().box(base, shape);
    // build the tile
    return product_type(box, this->data());
}


// static interface
// my read/write flag
template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
readOnly() -> bool
{
    // easy enough
    return isReadOnly;
}


#endif

// end of file
