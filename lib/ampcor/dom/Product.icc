// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2020 all rights reserved

// code guard
#if !defined(ampcor_dom_Product_icc)
#error this file contains implementation details for ampcor::dom::Product
#else


// metamethods
template <class specT, bool isReadOnly>
template <typename... Args>
constexpr
ampcor::dom::Product<specT, isReadOnly>::
Product(Args&&... args) :
    grid_type(std::forward<Args>(args)...)
{}


// interface
template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
capacity() const -> size_type
{
    // my grid knows
    return this->layout().capacity();
}


template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
footprint() const -> size_type
{
    // my grid knows
    return this->capacity() * this->layout().pixelFootprint();;
}


// static interface
// my read/write flag
template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
readOnly() -> bool
{
    // easy enough
    return isReadOnly;
}


template <class specT, bool isReadOnly>
constexpr auto
ampcor::dom::Product<specT, isReadOnly>::
pixelFootprint() -> size_type
{
    // my product spec knows
    return product_type::pixelFootprint();
}


#endif

// end of file
