// -*- C++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// parasim
// (c) 1998-2020 all rights reserved


// code guard
#if !defined(ampcor_cuda_correlators_Sequential_icc)
#error This header is an implementation detail of ampcor::cuda::correlators::Sequential
#endif


// meta-methods
// destructor
template <class slcT, class offsetsT>
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
~Sequential()
{}


// constructor
template <class slcT, class offsetsT>
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
    Sequential(int rank,
               slc_const_reference ref, slc_const_reference sec, offsets_reference map,
               slc_shape_const_reference chip, slc_shape_const_reference window,
               int refineFactor, int refineMargin, int zoomFactor) :
    // my rank
    _rank { rank },
    // access to the input rasters
    _ref { ref },
    _sec { sec },
    _map { map },
    // the shapes of tiles
    _refShape { chip },
    _secShape { window },
    // the correlation refinement parameters
    _refineFactor { refineFactor },
    _refineMargin { refineMargin },
    _zoomFactor { zoomFactor }
{
    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential.setup");
    // show me
    channel
        << "[" << _rank << "]: "
        << "new Sequential worker:" << pyre::journal::newline
        // the reference tile shape
        << "  reference tiles:" << pyre::journal::newline
        << "     shape: {" << _refShape << "}" << pyre::journal::newline
        // the secondary tile coarse arena
        << "  secondary tiles:" << pyre::journal::newline
        << "     shape: {" << _secShape << "}" << pyre::journal::newline
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return;
}


// interface
// execute the correlation plan
template <class slcT, class offsetsT>
void
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
adjust(offsets_layout_const_reference box)
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.adjust");

    // sign in
    channel
        << "[" << _rank << "]: "
        << "adjusting the offset map: origin: {"
        << box.origin() << "}, shape: {" << box.shape() << "}"
        << pyre::journal::endl(__HERE__);

    // we have a valid plan; perform an initial exploration
    coarseCorrelation(box);
    // refine the neighborhood of the coarse match and try again
    refinedCorrelation(box);

    // done
    channel
        << "[" << _rank << "]: "
        << "  done"
        << pyre::journal::endl(__HERE__);

    // all done
    return;
}


// implementation details
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
coarseCorrelation(offsets_layout_const_reference box) -> void
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.adjust");

    // step 1: initial exploration of the correlation surface
    channel
        << "[" << _rank << "]: "
        << "  step 1: initial exploration of the correlation surface:"
        << pyre::journal::endl(__HERE__);

    // assemble and validate the work plan
    channel
        << "[" << _rank << "]: "
        << "    assembling and validating the work plan"
        << pyre::journal::endl(__HERE__);
    // build the plan
    plan_type plan = _assemblePlan(box, _refShape, _secShape);
    // if there are no valid pairs
    if (plan.size() == 0) {
        // make a channel
        pyre::journal::error_t error("ampcor.sequential.adjust");
        // complain
        error
            << "all specified correlation pairs were invalid!"
            << pyre::journal::endl(__HERE__);
        // just in case the user has specified that errors aren't fatal
        return;
    }

    // make a coarse arena on the host for the amplitudes of the reference tiles
    channel
        << "[" << _rank << "]: "
        << "    creating coarse arenas for the amplitudes"
        << pyre::journal::endl(__HERE__);
    // the reference tile arena has a trivial origin
    slc_index_type refOrigin {};
    // make the arena
    auto refArena = _createAmplitudeArena("coarse_ref.dat", plan.size(), _refShape, refOrigin);

    // the secondary tile arena has a non-trivial origin
    slc_index_type secOrigin = refOrigin - (_secShape - _refShape)/2;
    // make the arena
    auto secArena = _createAmplitudeArena("coarse_sec.dat", plan.size(), _secShape, secOrigin);

    // detect and transfer the tiles to the coarse arena
    channel
        << "[" << _rank << "]: "
        << "    detecting and transferring"
        << pyre::journal::endl(__HERE__);
    // move the data from the rasters to the arena
    _detect(plan, refArena, secArena);

    // compute the correlation surface
    auto gamma = _gamma("coarse", refArena, secArena);

    // find its maxima
    channel
        << "[" << _rank << "]: "
        << "    locating the correlation surface maxima and recording the offsets"
        << pyre::journal::endl(__HERE__);
    _maxcor(plan, gamma, 1);

    // all done
    return;
}


// narrow the search down to a smaller neighborhood of the best matching pairs, refine using
// DFTs, and then zoom in to get subpixel estimates
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
refinedCorrelation(offsets_layout_const_reference box) -> void
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.adjust");

    // step 2: refining the search neighborhoods and trying again
    channel
        << "[" << _rank << "]: "
        << "  step 2: refining the search:"
        << pyre::journal::endl(__HERE__);

    // check the parameters
    // if we have an invalid refinement factor
    if (_refineFactor < 2) {
        // get a channel
        pyre::journal::warning_t warning("ampcor.sequential.refined");
        // generate a report
        warning
            << "while refining the search:"
            << pyre::journal::newline
            << "refinement factor: " << _refineFactor
            << pyre::journal::newline
            << "unable to refine; refinement factor must be 2 or greater"
            << pyre::journal::endl(__HERE__);
        // and bail
        return;
    }
    // if we have an invalid refinement margin
    if (_refineMargin < 1) {
        // get a channel
        pyre::journal::warning_t warning("ampcor.sequential.refined");
        // generate a report
        warning
            << "while refining the search:"
            << pyre::journal::newline
            << "refinement margin: " << _refineMargin
            << pyre::journal::newline
            << "unable to refine; refinement margin must be 1 or greater"
            << pyre::journal::endl(__HERE__);
        // and bail
        return;
    }

    // a useful index
    slc_shape_type margin { _refineMargin, _refineMargin };

    // form the shape of the narrowed neighborhood in the reference raster
    auto refNarrowShape = _refShape / _refineFactor;
    // form the shape of the narrowed neighborhood in the secondary raster
    auto secNarrowShape = refNarrowShape + 2 * margin;

    // assemble and validate the work plan; we only need data for the narrow tiles
    channel
        << "[" << _rank << "]: "
        << "    assembling and validating the work plan"
        << pyre::journal::endl(__HERE__);
    // build the plan
    plan_type plan = _assemblePlan(box, refNarrowShape, secNarrowShape);
    // get the number of pairs
    auto pairs = plan.size();
    // if there are no valid pairs
    if (pairs == 0) {
        // make a channel
        pyre::journal::error_t error("ampcor.sequential.adjust");
        // complain
        error
            << "all specified correlation pairs were invalid!"
            << pyre::journal::endl(__HERE__);
        // just in case the user has specified that errors aren't fatal
        return;
    }

    channel
        << "pairs: " << pairs
        << pyre::journal::newline
        << "base: ref: {" << _refShape << "}, factor: " << _refineFactor
        << ", margin: " << _refineMargin
        << pyre::journal::newline
        << "narrow: ref: {" << refNarrowShape << "}, sec: {" <<secNarrowShape << "}"
        << pyre::journal::newline
        << pyre::journal::endl;

    // after refinement, the shape of the reference tiles goes back to the original value
    auto refRefinedShape = _refineFactor * refNarrowShape;
    // the refined tiles have a trivial origin
    slc_index_type refRefinedOrigin { 0, 0 };
    // make a device arena with these specs
    auto refRefinedComplex = _createComplexArena(pairs, refRefinedOrigin, refRefinedShape);
    // prime the arena: copy {refNarrowShape}d tiles from the reference raster
    _primeComplexArena(plan, _ref, refNarrowShape, true, refRefinedComplex);
    // deramp
    _deramp(refRefinedComplex, refNarrowShape);
    // refine: forward FFT, spread spectrum, inverse FFT
    _refine(refRefinedComplex, refNarrowShape);
    // detect


    // but the secondary tiles get refined with their new margin
    auto secRefinedShape = _refineFactor * secNarrowShape;
    // the secondary tiles don't
    slc_index_type secRefinedOrigin { -_refineFactor*_refineMargin, -_refineFactor*_refineMargin };
    // and make a device arena with the secondary tiles
    auto secRefinedComplex = _createComplexArena(pairs, secRefinedOrigin, secRefinedShape);
    // prime the arena: copy {secNarrowShape}d tiles from the secondary raster
    _primeComplexArena(plan, _sec, secNarrowShape, false, secRefinedComplex);
    // deramp
    _deramp(secRefinedComplex, secNarrowShape);
    // refine: forward FFT, spread spectrum, inverse FFT
    _refine(secRefinedComplex, secNarrowShape);
    // detect

    // compute the correlation surface
    // if not zooming, find its maxima
    // else, zoom + find maxima

    // all done
    return;
}


// plan assembly: pull out of {_map} the portion of the tile pairings that belong to me,
// discard the ones that don't fit within their respective inputs, and form the actual tile
// shapes
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_assemblePlan(offsets_layout_const_reference box,
              slc_shape_const_reference refShape, slc_shape_const_reference secShape)
    -> plan_type
{
    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential.plan");

    // make a plan
    plan_type plan;

    // extent of the input rasters
    // the lower bound for an index into the reference raster is its origin
    auto refMinIndex = _ref.layout().origin();
    // similarly for the secondary raster
    auto secMinIndex = _sec.layout().origin();
    // form the strict upper bound of indices into the reference index
    auto refMaxIndex = refMinIndex + _ref.layout().shape();
    // ditto for the secondary raster
    auto secMaxIndex = secMinIndex + _sec.layout().shape();

    // shifts to apply to the tile centers to form the origins of tiles
    auto refShift = refShape / 2;
    auto secShift = secShape / 2;

    // go through my portion of the pairings
    for (auto pairIdx : _map.layout().box(box.origin(), box.shape())) {
        // get the pair
        auto pair = _map[pairIdx];
        // convert the center of the {ref} tile into an index
        slc_index_type refCenter {
            static_cast<int>(pair.ref.first), static_cast<int>(pair.ref.second)
        };

        // form the origin of the reference tile
        auto refOrigin = refCenter - refShift;
        // if the reference origin is out of bounds
        if (refOrigin < refMinIndex) {
            // tell me
            channel
                << "[" << _rank << "]: "
                << "      pair (" << pairIdx << ") is invalid:"
                << pyre::journal::newline
                << "        origin@(" << refOrigin << ") < ref origin@(" << refMinIndex << ")"
                << pyre::journal::newline;
            // skip this pairing; it is invalid
            continue;
        }
        // if the extent spills out of the reference raster
        if (refOrigin + refShape > refMaxIndex) {
            // tell me
            channel
                << "[" << _rank << "]: "
                << "      pair (" << pairIdx << ") is invalid:"
                << pyre::journal::newline
                << "        origin@(" << refOrigin << ") + shape@(" << refShape
                << ") > ref shape@(" << refMaxIndex << ")"
                << pyre::journal::newline;
            // skip this pairing; it is invalid
            continue;
        }

        // compute the center of the {sec} tile
        auto secCenter = refCenter + slc_index_type(static_cast<int>(pair.shift.first),
                                                    static_cast<int>(pair.shift.second));
        // form the origin of the secondary tile
        auto secOrigin = secCenter - secShift;
        // if it's out of bounds
        if (secOrigin < secMinIndex) {
            // tell me
            channel
                << "[" << _rank << "]: "
                << "      pair (" << pairIdx << ") is invalid:"
                << pyre::journal::newline
                << "        origin@(" << secOrigin << ") < sec origin@(" << secMinIndex << ")"
                << pyre::journal::newline;
            // skip this pairing; it is invalid
            continue;
        }
        // if the extent spills out of the secondary raster
        if (secOrigin + secShape > secMaxIndex) {
            // tell me
            channel
                << "[" << _rank << "]: "
                << "      pair (" << pairIdx << ") is invalid:"
                << pyre::journal::newline
                << "        origin@(" << secOrigin << ") + shape@(" << secShape
                << ") > sec shape@(" << secMaxIndex << ")"
                << pyre::journal::newline;
            // skip this pairing; it is invalid
            continue;
        }

        // we have a valid pair; turn it into a plan record
        plan.push_back({pairIdx, refOrigin, secOrigin});
    }

    // tell me
    channel
        << "[" << _rank << "]: "
        << "      " << plan.size() << "/" << box.cells() << " valid tile pairs"
        << pyre::journal::endl(__HERE__);

    // all done
    return plan;
}


// build a real arena as an intermediate data product
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_createAmplitudeArena(string_type name, int pairs,
                      slc_shape_const_reference tileShape, slc_index_const_reference tileOrigin)
    -> arena_type
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.arena");

    // turn the number of pairs into a shape
    typename arena_type::spec_type::id_layout_type::shape_type pairsShape { pairs };
    // combine with the tile shape to form the arena layout
    auto arenaShape = pairsShape * tileShape;

    // pair numbering starts at zero
    typename arena_type::spec_type::id_layout_type::index_type pairsOrigin { 0 };
    // combine with the tile origin to form the arena origin
    auto arenaOrigin = pairsOrigin * tileOrigin;

    // convert all this to a layout
    typename arena_type::layout_type arenaLayout { arenaShape, arenaOrigin };

    // show me
    channel
        << "[" << _rank << "]: "
        << "      creating '" << name << "':"
        << " origin=(" << arenaOrigin << "), shape=(" << arenaShape << ")"
        << pyre::journal::endl(__HERE__);

    // create the product and return it
    return arena_type(arenaLayout, name, arenaLayout.cells());
}


// transfer tiles from the input rasters into corresponding arenas, and compute their magnitude
// in flight
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_detect(plan_const_reference plan, arena_reference refArena, arena_reference secArena) -> void
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.adjust");

    // detecting means
    auto detect = [](slc_pixel_type pixel) -> slc_value_type {
        // computing the amplitude of the complex pixel
        return std::abs(pixel);
    };

    // go through the plan
    for (auto pid = 0; pid < plan.size(); ++pid) {
        // get the origins of the tiles in their respective rasters
        const auto & [_, refOrigin, secOrigin] = plan[pid];
        // show me
        channel
            << "[" << _rank << "]: "
            << "      detecting ref(" << refOrigin << ") and sec(" << secOrigin <<  ")"
            << pyre::journal::endl(__HERE__);

        // we traverse one tile at a time
        typename arena_type::spec_type::id_layout_type::index_type pairShape { 1 };
        // the pairing id determines the shift from the arena origin to our tile
        arena_index_type pairShift { pid, 0, 0 };

        // specify the source tile in the reference raster
        auto refTile = _ref.box(refOrigin, _refShape);
        // specify the destination tile
        auto refArenaTile = refArena.box(refArena.layout().origin() + pairShift,
                                         pairShape * _refShape);
        // detect
        std::transform(refTile.begin(), refTile.end(), refArenaTile.begin(), detect);

        // specify the source tile in the secondary raster
        auto secTile = _sec.box(secOrigin, _secShape);
        // specify the destination tile
        auto secArenaTile = secArena.box(secArena.layout().origin() + pairShift,
                                         pairShape * _secShape);
        // detect
        std::transform(secTile.begin(), secTile.end(), secArenaTile.begin(), detect);
    }

    // all done
    return;
}


// go through the sequence of steps necessary to compute the correlation surface given a pair
// of arenas with detected tiles
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_gamma(string_type tag, arena_reference refArena, arena_reference secArena)
    -> dev_arena_type
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.gamma");

    // get the layout of the reference arena
    auto refLayout = refArena.layout();
    // allocate a device arena for the reference amplitudes
    dev_arena_type dRefArena { refLayout, refLayout.cells() };

    // get the layout of the secondary arena
    auto secLayout = secArena.layout();
    // allocate a device arena for the secondary amplitudes
    dev_arena_type dSecArena { secLayout, secLayout.cells() };

    // moving on
    // get the reference arena footprint
    auto refArenaFootprint = refArena.data()->bytes();
    // show me
    channel
        << "[" << _rank << "]: "
        << "      copying reference amplitudes to the device (" << refArenaFootprint << " bytes)"
        << pyre::journal::endl(__HERE__);
    // copy the amplitudes to the device
    auto refArenaCopyStatus = cudaMemcpy(dRefArena.data()->data(), refArena.data()->data(),
                                         refArenaFootprint, cudaMemcpyHostToDevice);
    // if something went wrong
    if (refArenaCopyStatus != cudaSuccess) {
        // build the error description
        std::string description = cudaGetErrorName(refArenaCopyStatus);
        // make a channel
        pyre::journal::error_t error("ampcor.cuda");
        // complain
        error
            << pyre::journal::at(__HERE__)
            << "while transferring reference amplitude tiles to the device: "
            << description << " (" << refArenaCopyStatus << ")"
            << pyre::journal::endl;
        // and bail
        throw std::logic_error(description);
    }

    // get the secondary arena footprint
    auto secArenaFootprint = secArena.data()->bytes();
    // show me
    channel
        << "[" << _rank << "]: "
        << "      copying secondary amplitudes to the device (" << secArenaFootprint << " bytes)"
        << pyre::journal::endl(__HERE__);
    // copy the amplitudes to the device
    auto secArenaCopyStatus = cudaMemcpy(dSecArena.data()->data(), secArena.data()->data(),
                                         secArenaFootprint, cudaMemcpyHostToDevice);
    // if something went wrong
    if (secArenaCopyStatus != cudaSuccess) {
        // build the error description
        std::string description = cudaGetErrorName(secArenaCopyStatus);
        // make a channel
        pyre::journal::error_t error("ampcor.cuda");
        // complain
        error
            << pyre::journal::at(__HERE__)
            << "while transferring secondary amplitude tiles to the device: "
            << description << " (" << secArenaCopyStatus << ")"
            << pyre::journal::endl;
        // and bail
        throw std::logic_error(description);
    }

    // adjust the reference tiles to zero mean and compute their variance
    channel
        << "[" << _rank << "]: "
        << "      adjusting the amplitudes to zero mean and computing statistics"
        << pyre::journal::endl(__HERE__);
    // adjust the reference amplitudes to zero-mean and compute the variances
    auto refVariances = _referenceStatistics(dRefArena);

    // build sum area tables so we can do the same to the sliding window in the secondary tiles
    channel
        << "[" << _rank << "]: "
        << "      building sum area tables"
        << pyre::journal::endl(__HERE__);
    // compute the SATs of the secondary amplitudes
    auto secSATs = _secondarySumAreaTables(dSecArena);

    // use the sum area tables to compute mean amplitude for all possible window placements
    channel
        << "[" << _rank << "]: "
        << "      computing statistics"
        << pyre::journal::endl(__HERE__);
    auto secMeans = _secondaryStatistics(refArena.layout(), secArena.layout(), secSATs);

    // compute the correlation matrix
    channel
        << "[" << _rank << "]: "
        << "    computing the correlation surface"
        << pyre::journal::endl(__HERE__);
    auto gamma = _correlate(dRefArena, refVariances, dSecArena, secMeans);

    // all done
    return gamma;
}


// compute and store the locations of the maxima of the correlation surface
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_maxcor(plan_const_reference plan, dev_arena_reference gamma, slc_value_type zoomFactor) -> void
{
    // get the arena layout
    auto layout = gamma.layout();
    // its shape
    auto shape = layout.shape();
    // and its origin
    auto origin = layout.origin();

    // unpack the shape of the covariance arena
    auto [pairs, corRows, corCols] = shape;
    // and the origin
    auto [orgTile, orgRow, orgCol] = origin;

    // allocate device memory to store the indices of the maximum value in each tile
    dvector_type delta { 2 * pairs };
    // compute the locations of the maxima
    kernels::maxcor(gamma.data()->data(),
                    pairs, corRows, corCols, orgRow, orgCol, zoomFactor,
                    delta.data());

    // now, go through all the tiles
    for (auto pid = 0; pid < pairs; ++pid) {
        // use the plan to map the pair id to the tile id
        [[maybe_unused]] auto [tid, _r, _s] = plan[pid];
        // get corresponding record from the output product, in write enabled mode
        auto & rec = _map[tid];
        // update the shift
        rec.shift.first += delta[2*pid + 0];
        rec.shift.second += delta[2*pid + 1];
        // mark it as a good one
        rec.confidence = 1;
    }

    // all done
    return;
}


// reduce the reference amplitude arena tiles to zero mean and compute their variances
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_referenceStatistics(dev_arena_reference arena) -> dvector_type
{
    // get the arena shape
    auto shape = arena.layout().shape();
    // there are as many variances to compute as there are tile pairs in the plan
    size_type pairs = shape[0];
    // the shape of the reference tiles
    auto refRows = shape[1];
    auto refCols = shape[2];

    // allocate room for the result
    dvector_type variances { pairs };
    // engage
    kernels::refStats(arena.data()->data(), pairs, refRows, refCols, variances.data());

    // all done
    return variances;
}


template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_secondarySumAreaTables(dev_arena_reference arena) -> dev_arena_type
{
    // a sum area table is a device arena with a half border, so we will build it using the
    // layout information in the amplitude arena

    // get the incoming arena layout
    auto arenaLayout = arena.layout();
    // extract the shape
    auto arenaShape = arenaLayout.shape();
    // and the origin
    auto arenaOrigin = arenaLayout.origin();

    // the SAT has a border of zeroes as the leftmost column and topmost row, so its origin is
    // up and to the left relative to the arena tiles, and its shape needs room for the extra
    // data, while the number of tiles themselves are untouched
    arena_index_type delta { 0, 1, 1 };
    // build the origin
    arena_index_type satOrigin = arenaOrigin - delta;
    // build the shape
    arena_shape_type satShape = arenaShape + delta;
    // assemble the SAT layout
    arena_layout_type satLayout { satShape, satOrigin };
    // and build the table
    dev_arena_type sat { satLayout, satLayout.cells() };

    // get the number of tiles
    auto [pairs, tileRows, tileCols] = arenaShape;

    // engage
    kernels::sat(arena.data()->data(), pairs, tileRows, tileCols, sat.data()->data());

    // all done
    return sat;
}


template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_secondaryStatistics(arena_layout_const_reference refLayout,
                     arena_layout_const_reference secLayout,
                     dev_arena_reference sat) -> dev_arena_type
{
    // unpack the reference shape
    auto [pairs, refRows, refCols] = refLayout.shape();
    // unpack the secondary shape; the {_} is an unused variable
    [[maybe_unused]] auto [_, secRows, secCols] = secLayout.shape();

    // compute the possible placements of reference tile sized chips within the secondary tiles
    auto corRows = secRows - refRows + 1;
    auto corCols = secCols - refCols + 1;
    // build the shape of the table of averages
    arena_shape_type corShape { pairs, corRows, corCols };
    // and assemble its layout, using the same origin as the secondary tiles
    arena_layout_type corLayout { corShape, secLayout.origin() };

    // allocate room for the table of averages
    dev_arena_type mean { corLayout, corLayout.cells() };

    // engage
    kernels::secStats(sat.data()->data(),
                      pairs, refRows, refCols, secRows, secCols, corRows, corCols,
                      mean.data()->data());

    // all done
    return mean;
}


template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_correlate(dev_arena_const_reference dRefArena, dvector_reference dRefVariance,
           dev_arena_const_reference dSecArena, dev_arena_const_reference dSecMeans)
    -> dev_arena_type
{
    // unpack the reference shape
    auto [pairs, refRows, refCols] = dRefArena.layout().shape();
    // unpack the secondary shape; the {_sp} is an unused variable
    [[maybe_unused]] auto [_sp, secRows, secCols] = dSecArena.layout().shape();
    // unpack the correlation shape
    [[maybe_unused]] auto [_cp, corRows, corCols] = dSecMeans.layout().shape();

    // the layout of the correlation arena is the same as the secondary means arena
    auto gammaLayout = dSecMeans.layout();
    // allocate room for the correlation matrix arena
    dev_arena_type gamma { gammaLayout, gammaLayout.cells() };

    // engage
    kernels::correlate(dRefArena.data()->data(), dRefVariance.data(),
                       dSecArena.data()->data(), dSecMeans.data()->data(),
                       pairs,
                       refRows, refCols, secRows, secCols, corRows, corCols,
                       gamma.data()->data());

    // all done
    return gamma;
}


// allocate a complex arena on the device given the shape and origin of the tile payload, and
// the number of pairs
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_createComplexArena(int pairs,
                    slc_index_const_reference tileOrigin, slc_shape_const_reference tileShape)
    -> dev_carena_type
{
    // make a channel
    pyre::journal::info_t channel("ampcor.sequential.refine");

    // the origin of the pair index
    typename arena_spec::id_layout_type::index_type pairOrigin { 0 };
    // and its shape
    typename arena_spec::id_layout_type::shape_type pairShape { pairs };

    // now, we have the building blocks to generate the arena origin
    auto carenaOrigin = pairOrigin * tileOrigin;
    // and its shape
    auto carenaShape = pairShape * tileShape;
    // assemble its layout
    arena_layout_type carenaLayout { carenaShape, carenaOrigin };

    // tell me
    channel
        << "[" << _rank << "]: "
        << "creating a complex device arena:"
        << " origin=(" << carenaLayout.origin() << "), shape=(" << carenaLayout.shape() << ")"
        << pyre::journal::endl(__HERE__);

    // create the aren and return it
    return dev_carena_type(carenaLayout, carenaLayout.cells());
}


// move data from a raster to a complex device arena
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_primeComplexArena(plan_const_reference plan,
                   slc_const_reference raster, slc_shape_const_reference tileShape, bool refQ,
                   dev_carena_reference arena)
    -> void
{
    // make a channel
    pyre::journal::debug_t channel("ampcor.cuda.refine.primeComplex");

    // shape component that specifies exactly one pair
    typename arena_spec::id_layout_type::shape_type one { 1 };

    // form the shape of each tile in the arena as the cartesian product of the pair selector
    // with the shape of the tile in the raster
    arena_shape_type dstShape = one * tileShape;

    // go through the entries in the plan
    for (auto pid=0; pid < plan.size(); ++pid) {
        // unpack this pairing
        auto & [ pdx, refOrigin, secOrigin ] = plan[pid];

        // reference or secondary
        auto & srcOrigin = refQ ? refOrigin : secOrigin;

        // isolate the source tile
        auto srcTile = raster.box(srcOrigin, tileShape);

        // compute the shift to the start of this tile in the destination arena
        arena_index_type thisPair { pid, 0, 0 };
        // compute the origin of the destination tile
        auto dstOrigin = thisPair + arena.layout().origin();
        // isolate the destination tile region
        auto dstTile = arena.box(dstOrigin, dstShape);

        // tell me
        channel
            << "pid " << pid << ", (pair " << pdx << "):"
            << " from (" << srcOrigin << ")+(" << tileShape << ")"
            << " to (" << dstOrigin << ")+(" << dstShape << ")"
            << pyre::journal::newline;

        // transfer the data
        std::copy(srcTile.begin(), srcTile.end(), dstTile.begin());
    }

    // flush
    channel << pyre::journal::endl(__HERE__);
    // all done
    return;
}


// move data from a raster to a complex device arena
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_deramp(dev_carena_reference arena, slc_shape_const_reference narrowShape) -> void
{
    // make a channel
    pyre::journal::info_t channel("ampcor.cuda.refine.primeComplex");

    // tell me
    channel
        << "[" << _rank << "]: deramping"
        << pyre::journal::endl(__HERE__);

    // unpack the tile shape
    auto [tileRows, tileCols] = narrowShape;
    // and the arena shape
    auto [pairs, arenaRows, arenaCols] = arena.layout().shape();

    // launch
    kernels::deramp(arena.data()->data(), pairs, arenaRows, arenaCols, tileRows, tileCols);

    // all done
    return;
}


template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_refine(dev_carena_reference arena, slc_shape_const_reference narrowShape) -> void
{
    // make a channel
    pyre::journal::info_t channel("ampcor.cuda.refine.interpolate");

    // tell me
    channel
        << "[" << _rank << "]: refining tiles"
        << pyre::journal::endl(__HERE__);

    // unpack the tile shape
    auto [tileRows, tileCols] = narrowShape;
    // and the arena shape
    auto [pairs, arenaRows, arenaCols] = arena.layout().shape();

    // cast the arena into an array of {cufftComplex}
    auto fftArena = reinterpret_cast<cufftComplex *>(arena.data()->data());

    // step 1: forward FFT in-place
    channel
        << "[" << _rank << "]: forward FFTs"
        << pyre::journal::endl(__HERE__);
    // the plan characteristics
    int dim = 2;
    // the input data is confined to the narrow tiles
    int narrowRanks[] = { tileRows, tileCols };
    // regardless, the distance between blocks is the number of cells in an arena tile
    int distance = arenaRows * arenaCols;

    // input data layout
    int fwdIEmbed[] = { arenaRows, arenaCols };
    int fwdIStride = 1;
    int fwdIDistance = distance;

    // output data layout
    int fwdOEmbed[] = { arenaRows, arenaCols };
    int fwdOStride = 1;
    int fwdODistance = distance;

    // grab a spot for a plan
    cufftHandle fwdPlan;
    // instantiate
    auto fwdPlanStatus = cufftPlanMany(&fwdPlan,
                                       // 2d tiles
                                       dim,
                                       // the ranks of the input tiles
                                       narrowRanks,
                                       // input layout
                                       fwdIEmbed, fwdIStride, fwdIDistance,
                                       // output layout
                                       fwdOEmbed, fwdOStride, fwdODistance,
                                       // full DFT
                                       CUFFT_C2C,
                                       // as many FFTs as there are tile pairs
                                       pairs);
    // if something went wrong
    if (fwdPlanStatus != CUFFT_SUCCESS) {
        // make a channel
        pyre::journal::error_t error("ampcor.cuda");
        // complain
        error
            << pyre::journal::at(__HERE__)
            << "while refining tiles: forward FFT plan: error " << fwdPlanStatus
            << pyre::journal::endl;
        // and bail
        throw std::runtime_error("while refining the reference tiles: forward FFT plan error");
    }

    // execute the forward plan
    auto fwdLaunchStatus = cufftExecC2C(fwdPlan, fftArena, fftArena, CUFFT_FORWARD);
    // if something went wrong
    if (fwdLaunchStatus != CUFFT_SUCCESS) {
        // make a channel
        pyre::journal::error_t error("ampcor.cuda");
        // complain
        error
            << "while refining tiles: executing the forward FFT plan: error "
            << fwdLaunchStatus
            << pyre::journal::endl(__HERE__);
        // and bail
        throw std::runtime_error("while executing a forward FFT plan");
    }
    // wait for the device to finish
    auto fwdExecStatus = cudaDeviceSynchronize();
    // if something went wrong
    if (fwdExecStatus != cudaSuccess) {
        // form the error description
        std::string description = cudaGetErrorName(fwdExecStatus);
        // make a channel
        pyre::journal::error_t channel("ampcor.cuda");
        // complain
        channel
            << "while refining tiles: STEP 1: " << description << " (" << fwdExecStatus << ")"
            << pyre::journal::endl(__HERE__);
        // bail
        throw std::runtime_error(description);
    }
    // clean up
    cufftDestroy(fwdPlan);

    // step2: spread the spectrum
    _spreadSpectrum(arena, narrowShape);

    // step 3: inverse FFT in-place
    channel
        << "[" << _rank << "]: inverse FFTs"
        << pyre::journal::endl(__HERE__);

    // the output data will live on the expanded tiles
    int refinedRanks[] = { arenaRows, arenaCols };

    // input data layout
    int invIEmbed[] = { arenaRows, arenaCols };
    int invIStride = 1;
    int invIDistance = distance;

    // output data layout
    int invOEmbed[] = { arenaRows, arenaCols };
    int invOStride = 1;
    int invODistance = distance;

    // grab a spot for a plan
    cufftHandle invPlan;
    // instantiate
    auto invPlanStatus = cufftPlanMany(&invPlan,
                                       // 2d tiles
                                       dim,
                                       // the ranks of the input tiles now include the entire tile
                                       refinedRanks,
                                       // input layout
                                       invIEmbed, invIStride, invIDistance,
                                       // output layout
                                       invOEmbed, invOStride, invODistance,
                                       // full DFT
                                       CUFFT_C2C,
                                       // as many FFTs as there are tile pairs
                                       pairs);
    // if something went wrong
    if (invPlanStatus != CUFFT_SUCCESS) {
        // make a channel
        pyre::journal::error_t error("ampcor.cuda");
        // complain
        error
            << pyre::journal::at(__HERE__)
            << "while refining tiles: inverse FFT plan: error " << invPlanStatus
            << pyre::journal::endl;
        // and bail
        throw std::runtime_error("while refining the reference tiles: inverse FFT plan error");
    }

    // execute the inverse plan
    auto invLaunchStatus = cufftExecC2C(invPlan, fftArena, fftArena, CUFFT_INVERSE);
    // if something went wrong
    if (invLaunchStatus != CUFFT_SUCCESS) {
        // make a channel
        pyre::journal::error_t error("ampcor.cuda");
        // complain
        error
            << "while refining tiles: executing the inverse FFT plan: error "
            << invLaunchStatus
            << pyre::journal::endl(__HERE__);
        // and bail
        throw std::runtime_error("while executing a inverse FFT plan");
    }
    // wait for the device to finish
    auto invExecStatus = cudaDeviceSynchronize();
    // if something went wrong
    if (invExecStatus != cudaSuccess) {
        // form the error description
        std::string description = cudaGetErrorName(invExecStatus);
        // make a channel
        pyre::journal::error_t channel("ampcor.cuda");
        // complain
        channel
            << "while refining tiles: STEP 1: " << description << " (" << invExecStatus << ")"
            << pyre::journal::endl(__HERE__);
        // bail
        throw std::runtime_error(description);
    }
    // clean up
    cufftDestroy(invPlan);

    // all done
    return;
}


// given the forward FFT of the complex narrow tiles, push the spectrum to the four corners of
// the refined arena in preparation for the inverse FFT
template <class slcT, class offsetsT>
auto
ampcor::cuda::correlators::Sequential<slcT, offsetsT>::
_spreadSpectrum(dev_carena_reference arena, slc_shape_const_reference narrowShape) -> void
{
    // this is the transformation we apply to each tile in the arena

    //     X X . .          X . . X
    //     X X . .          . . . .
    //     . . . .   --->   . . . .
    //     . . . .          X . . X

    // where the overall shape is in {arena} and the shape with the X in {narrowShape}

    // make a channel
    pyre::journal::info_t channel("ampcor.cuda.refine.spreadSpectrum");

    // tell me
    channel
        << "[" << _rank << "]: spreading the spectrum"
        << pyre::journal::endl(__HERE__);

    // unpack the tile shape
    auto [tileRows, tileCols] = narrowShape;
    // and the arena shape
    auto [pairs, arenaRows, arenaCols] = arena.layout().shape();

    // launch
    kernels::spread(arena.data()->data(), pairs, arenaRows, arenaCols, tileRows, tileCols);

    // all done
    return;
}


// end of file
