// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// parasim
// (c) 1998-2019 all rights reserved
//

// code guard
#if !defined(ampcor_libampcor_correlators_sequential_icc)
#error This header file contains implementation details of class ampcor::correlators::Sequential
#endif


// interface
void
ampcor::correlators::Sequential::
addReferenceTile(const slc_type & slc, size_type pid, slice_type slice)
{
    // make a timer
    timer_t timer("ampcor.sequential");
    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential");
    // and another for reporting timings
    pyre::journal::info_t tlog("ampcor.sequential");

    // start the clock
    timer.reset().start();
    // compute the starting point of the reference tile that corresponds to this pair id
    cell_type * support = _buffer + pid*(_refCells + _tgtCells);
    // adapt it into a grid
    gview_type tile { {_refShape, slc.layout().packing()} , support };
    // build a view over the entire thing
    auto view = tile.view();

    // build a view to the reference raster that is limited to the supplied {slice}
    auto ref = slc.view(slice);

    // make a function that computes the magnitude of complex numbers
    auto magnitude = [] (slc_type::pixel_type pxl) -> cell_type
                     { return std::abs(pxl); };
    // stop the clock
    timer.stop();
    // show me
    tlog
        << pyre::journal::at(__HERE__)
        << "pair #" << pid << ": reference tile start up: " << 1e6 * timer.read() << " μs"
        << pyre::journal::endl;

    // start the clock
    timer.reset().start();
    // initialize the tile by applying {magnitude} to every cell in {ref} and storing the
    // result in {view}
    std::transform(ref.begin(), ref.end(), view.begin(), magnitude);
    // stop the clock
    timer.stop();
    // show me
    tlog
        << pyre::journal::at(__HERE__)
        << "reading reference tile, computing amplitudes, and storing: "
        << 1e6 * timer.read() << " μs"
        << pyre::journal::endl;

    // start the clock
    timer.reset().start();
    // compute the sum of the tile amplitudes
    auto sum = std::accumulate(view.begin(), view.end(), 0);
    // compute the average value
    auto avg = sum / _refCells;
    // stop the clock
    timer.stop();
    // show me
    tlog
        << pyre::journal::at(__HERE__)
        << "computing the amplitude average: "
        << 1e6 * timer.read() << " μs"
        << pyre::journal::endl;

    // build a function that subtracts the average from every amplitude
    auto rel = [avg] (cell_type cell) -> cell_type
               { return cell - avg; };

    // start the clock
    timer.reset().start();
    // subtract this value from every cell in the reference tile
    std::for_each(view.begin(), view.end(), rel);
    // stop the clock
    timer.stop();
    // show me
    tlog
        << pyre::journal::at(__HERE__)
        << "subtracting the average amplitude in the reference tile: "
        << 1e6 * timer.read() << " μs"
        << pyre::journal::endl;

    // show me
    channel
        << pyre::journal::at(__HERE__)
        << "adding reference tile #" << pid << ":" << pyre::journal::newline
        << "    pair id: " << pid << pyre::journal::newline
        << "    slice:" << pyre::journal::newline
        << "        from: (" << slice.low() << ")" << pyre::journal::newline
        << "        to: (" << slice.high() << ")" << pyre::journal::newline
        << "    support:" << pyre::journal::newline
        << "        anchor: " << _buffer << pyre::journal::newline
        << "        offset: " << pid*(_refCells + _tgtCells) << pyre::journal::newline
        << "        support: " << support << pyre::journal::newline
        << "        extent: " << tile.layout().size() << " cells" << pyre::journal::newline
        << "        footprint: " << sizeof(cell_type) * tile.layout().size() << " bytes"
        << pyre::journal::endl;

    // all done
    return;
}

void
ampcor::correlators::Sequential::
addTargetTile(const slc_type & slc, size_type pid, slice_type slice)
{
    // make a timer
    timer_t timer("ampcor.sequential");
    // make a channel
    pyre::journal::debug_t channel("ampcor.sequential");
    // and another for reporting timings
    pyre::journal::info_t tlog("ampcor.sequential");

    // start the clock
    timer.reset().start();
    // compute the starting point of the target tile that corresponds to this pair id
    cell_type * support = _buffer + pid*(_refCells + _tgtCells) + _refCells;
    // adapt it into a grid
    gview_type tile { {_tgtShape, slc.layout().packing()} , support };
    // build a view over the entire thing
    auto view = tile.view();

    // build a view to the target raster that is limited to the supplied {slice}
    auto tgt = slc.view(slice);

    // make a function that computes the magnitude of complex numbers
    auto magnitude = [] (slc_type::pixel_type pxl) -> cell_type
                     { return std::abs(pxl); };
    // stop the clock
    timer.stop();
    // show me
    tlog
        << pyre::journal::at(__HERE__)
        << "pair #" << pid << ": target window start up: " << 1e6 * timer.read() << " μs"
        << pyre::journal::endl;

    // start the clock
    timer.reset().start();
    // initialize the tile by applying {magnitude} to every cell in {tgt} and storing the
    // result in {view}
    std::transform(tgt.begin(), tgt.end(), view.begin(), magnitude);
    // stop the clock
    timer.stop();
    // show me
    tlog
        << pyre::journal::at(__HERE__)
        << "reading target window, computing amplitudes, and storing: "
        << 1e6 * timer.read() << " μs"
        << pyre::journal::endl;

    // show me
    channel
        << pyre::journal::at(__HERE__)
        << "adding target tile #" << pid << ":" << pyre::journal::newline
        << "    pair id: " << pid << pyre::journal::newline
        << "    slice:" << pyre::journal::newline
        << "        from: (" << slice.low() << ")" << pyre::journal::newline
        << "        to: (" << slice.high() << ")" << pyre::journal::newline
        << "    support:" << pyre::journal::newline
        << "        anchor: " << _buffer << pyre::journal::newline
        << "        offset: " << pid*(_refCells + _tgtCells) + _refCells << pyre::journal::newline
        << "        support: " << support << pyre::journal::newline
        << "        extent: " << tile.layout().size() << " cells" << pyre::journal::newline
        << "        footprint: " << sizeof(cell_type) * tile.layout().size() << " bytes"
        << pyre::journal::endl;

    // all done
    return;
}


// end of file
